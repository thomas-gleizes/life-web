var A=Object.defineProperty;var y=(a,n,f)=>n in a?A(a,n,{enumerable:!0,configurable:!0,writable:!0,value:f}):a[n]=f;var o=(a,n,f)=>y(a,typeof n!="symbol"?n+"":n,f);(function(){"use strict";class a{constructor(e,i,s,t){o(this,"_name");o(this,"_description");o(this,"_neighborToSurvive");o(this,"_neighborToBorn");this._name=e,this._description=i,this._neighborToSurvive=s??[],this._neighborToBorn=t??[]}get name(){return this._name}get description(){return this._description}mustSurvive(e){return this._neighborToSurvive.includes(e)}mustBorn(e){return this._neighborToBorn.includes(e)}toJson(){return{name:this._name,description:this._description,neighborToDead:this._neighborToSurvive,neighborToAlive:this._neighborToBorn}}static fromJSON(e){return new a(e.name,e.description,e.neighborToDead,e.neighborToAlive)}}class n{constructor(e=[],i="",s=f.Conway){o(this,"_name");o(this,"cells");o(this,"_rule");this.cells=[...e],this._rule=s,this._name=i}static from(e,i){const s=[];for(let t=0;t<e.length;t++)for(let l=0;l<e[t].length;l++)e[t][l]==="X"&&s.push([l,t]);return new n(s,i)}get name(){return this._name}set name(e){this._name=e}addCellPattern(e){return this.cells.push(...e),this}addPattern(e){return this.cells.push(...e.cells),this}addCell(e,i){return this.cells.push([e,i]),this}rotateRight(){return this.cells=this.cells.map(([e,i])=>[i,-e]),this}rotateLeft(){return this.cells=this.cells.map(([e,i])=>[-i,e]),this}symmetricY(){return this.cells=this.cells.map(([e,i])=>[e,-i]),this}symmetricX(){return this.cells=this.cells.map(([e,i])=>[-e,i]),this}symmetricXY(){return this.cells=this.cells.map(([e,i])=>[-e,-i]),this}setOrigin(e,i){const[[s,t]]=this.getBoundingBox();return this.cells=this.cells.map(([l,r])=>[e-s+l,i-t+r]),this}getCells(){return this.cells}toCells(){return this.cells.map(([e,i])=>`${Math.floor(e)},${Math.floor(i)}`)}get rule(){return this._rule}getBoundingBox(){let e=1/0,i=1/0,s=-1/0,t=-1/0;for(const[l,r]of this.cells)e=Math.min(e,l),i=Math.min(i,r),s=Math.max(s,l),t=Math.max(t,r);return[[e,i],[s,t]]}getSize(){const[[e,i],[s,t]]=this.getBoundingBox();return[s-e+1,t-i+1]}getCenter(){const[[e,i],[s,t]]=this.getBoundingBox();return[(e+s)/2,(i+t)/2]}centerOrigin(){const[e,i]=this.getCenter();return this.cells=this.cells.map(([s,t])=>[s-e,t-i]),this}toZeros(){return this.setOrigin(0,0),this}clone(){return new n(this.cells,this._name,this._rule)}toJson(){return{name:this._name,cells:this.cells,rules:this._rule.toJson()}}static fromJson(e){return new n(e.cells,e.name,a.fromJSON(e.rules))}static parse(e){const i=new n;let s=!1,t=1,l=0,r=0,h,d;for(let c=0;c<e.length;c++){if(s){e[c]===`
`&&(s=!1);continue}switch(e[c]){case"#":case"x":case"!":s=!0;continue;case"$":l=0,r+=t;continue;case"b":l+=t,t=1;continue;case"o":for(let g=0;g<t;g++)i.addCell(l++,r);t=1;continue}h=e.slice(c).match(/[0-9]+/),h&&!h.index&&(d=h[0],t=parseInt(d),c+=d.length-1)}return i}}const f={Conway:new a("Conway","In Conway's Game of Life, a cell dies if it has fewer than 2 neighbors (underpopulation) or more than 3 neighbors (overpopulation). A dead cell becomes alive if it has exactly 3 neighbors (reproduction).",[2,3],[3]),highLife:new a("High Life","In High Life, a cell dies if it has fewer than 2 neighbors (underpopulation) or more than 3 neighbors (overpopulation). A dead cell becomes alive if it has exactly 3 or 6 neighbors.",[2,3,6],[3,6]),seeds:new a("Seeds","In Seeds, a dead cell becomes alive if it has exactly 2 neighbors. All live cells die in every generation.",[2],[2]),seeds2:new a("Seeds 2","In Seeds 2, a dead cell becomes alive if it has exactly 2 or 3 neighbors. All live cells die in every generation.",[2,3],[2,3]),lifeWithoutDeath2:new a("Life without Death 2","In Life without Death, a cell stays alive if it has 1, 2, 3, 4, 5, 6, 7, or 8 neighbors. A dead cell becomes alive if it has exactly 2 neighbors.",[0,1,2,3,4,5,6,7,8],[2]),lifeWithoutDeath3:new a("Life without Death 2","In Life without Death, a cell stays alive if it has 1, 2, 3, 4, 5, 6, 7, or 8 neighbors. A dead cell becomes alive if it has exactly 3 neighbors.",[0,1,2,3,4,5,6,7,8],[3]),lifeWithoutDeath4:new a("Life without Death 4","In Life without Death, a cell stays alive if it has 1, 2, 3, 4, 5, 6, 7, or 8 neighbors. A dead cell becomes alive if it has exactly 4 neighbors.",[0,1,2,3,4,5,6,7,8],[4]),life34:new a("34 Life","In 34 Life, a cell stays alive if it has 3 or 4 neighbors, and a dead cell becomes alive if it has 3 or 4 neighbors.",[3,4],[3,4]),diamoeba:new a("Diamoeba","In Diamoeba, a cell dies if it has fewer than 5 neighbors or more than 8 neighbors. A dead cell becomes alive if it has exactly 3, 5, 6, 7, or 8 neighbors.",[2,6,7],[3,5,6,7,8]),twoByTwo:new a("2x2","In 2x2, a cell dies if it has exactly 2 or 3 neighbors. A dead cell becomes alive if it has exactly 3 or 6 neighbors.",[0,1,4,5,6,7,8],[3,6]),maze:new a("Maze","In Maze, a cell dies if it has fewer than 1 or more than 5 neighbors. A dead cell becomes alive if it has exactly 3 neighbors.",[1,2,3,4,5],[3]),move:new a("Move","In Move, a cell dies if it has fewer than 2 or more than 6 neighbors. A dead cell becomes alive if it has exactly 3 neighbors.",[2,3,4,5,6],[3]),pseudoLife:new a("Pseudo Life","In Pseudo Life, a cell dies if it has fewer than 2 or more than 3 neighbors. A dead cell becomes alive if it has exactly 3 or 8 neighbors.",[2,3],[3,8]),walledCities:new a("Walled Cities","In Walled Cities, a cell dies if it has fewer than 4 or more than 5 neighbors. A dead cell becomes alive if it has exactly 4 or 5 neighbors.",[4,5],[4,5]),stains:new a("Stains","In Stains, a cell dies if it has fewer than 2 or more than 3 neighbors. A dead cell becomes alive if it has exactly 3 or 7 neighbors.",[2,3,7],[3,7]),coagulations:new a("Coagulations","In Coagulations, a cell dies if it has fewer than 2 or more than 3 neighbors. A dead cell becomes alive if it has exactly 3, 7, or 8 neighbors.",[2,3,7,8],[3,7,8]),dayAndNight:new a("Day & Night","In Day & Night, a cell dies if it has fewer than 3 or more than 6 neighbors. A dead cell becomes alive if it has exactly 3, 6, 7, or 8 neighbors.",[3,7],[3,6,7,8]),anneal:new a("Anneal","In Anneal, a cell dies if it has fewer than 3 or more than 5 neighbors. A dead cell becomes alive if it has exactly 4, 6, or 7 neighbors.",[3,4,5],[4,6,7]),moveMirror:new a("Move-Mirror","In Move-Mirror, a cell dies if it has fewer than 1 or more than 7 neighbors. A dead cell becomes alive if it has exactly 3 or 5 neighbors.",[1,3,4,5,7],[3,5]),longLife:new a("Long Life","In Long Life, a cell dies if it has fewer than 5 or more than 6 neighbors. A dead cell becomes alive if it has exactly 5 or 6 neighbors.",[5,6],[5,6]),ameoba:new a("Ameoba","In Ameoba, a cell dies if it has fewer than 5 or more than 8 neighbors. A dead cell becomes alive if it has exactly 3, 5, 7, or 8 neighbors.",[3,5,7],[3,5,7,8]),replicator:new a("Replicator","In Replicator, a cell dies if it has an odd number of neighbors. A dead cell becomes alive if it has an even number of neighbors.",[0,2,4,6,8],[0,2,4,6,8])},u={cubeX9:n.from([["X","X","X"],["X","X","X"],["X","X","X"]],"Cube x9"),cubeX4:new n([[0,0],[1,0],[0,1],[1,1]],"Cube x4"),beacon:new n([[0,0],[1,0],[0,1],[3,2],[2,3],[3,3]],"Beacon"),pulsar:new n([[2,0],[3,0],[4,0],[8,0],[9,0],[10,0],[0,2],[5,2],[7,2],[12,2],[0,3],[5,3],[7,3],[12,3],[0,4],[5,4],[7,4],[12,4],[2,5],[3,5],[4,5],[8,5],[9,5],[10,5],[2,7],[3,7],[4,7],[8,7],[9,7],[10,7],[0,8],[5,8],[7,8],[12,8],[0,9],[5,9],[7,9],[12,9],[0,10],[5,10],[7,10],[12,10],[2,12],[3,12],[4,12],[8,12],[9,12],[10,12]],"Pulsar"),pentadecathlon:new n([[0,0],[1,0],[2,0],[1,1],[0,2],[1,2],[2,2],[1,3],[0,4],[1,4],[2,4]],"Pentadecathlon"),glider:new n([[0,0],[1,1],[2,1],[0,2],[1,2]],"Glider"),lwss:new n([[0,0],[3,0],[4,1],[0,2],[4,2],[1,3],[2,3],[3,3],[4,3]],"Lightweight spaceship"),gliderGun:new n([[1,5],[1,6],[2,6],[2,5],[11,5],[11,6],[11,7],[12,8],[13,9],[14,9],[12,4],[13,3],[14,3],[15,6],[16,4],[16,8],[17,5],[17,6],[17,7],[18,6],[21,5],[21,4],[21,3],[22,5],[22,4],[22,3],[23,6],[23,2],[25,6],[25,7],[25,2],[25,1],[35,3],[35,4],[36,3],[36,4]],"Gosper glider gun")};class w{constructor(){o(this,"_cellsAlive");o(this,"_initialCells");o(this,"_iteration");o(this,"rule");this._cellsAlive=new Set([...u.gliderGun.clone().toCells(),...u.gliderGun.clone().symmetricX().toCells(),...u.gliderGun.clone().symmetricXY().toCells(),...u.gliderGun.clone().symmetricY().toCells()]),this._initialCells=Array.from(this._cellsAlive),this._iteration=0,this.rule=f.Conway}reset(){this._cellsAlive.clear();for(const e of this._initialCells)this._cellsAlive.add(e);this._iteration=0}setRule(e){this.rule=e}clear(){this._cellsAlive.clear(),this._iteration=0}save(){this._initialCells=Array.from(this._cellsAlive)}addPattern(e,[i,s]){for(const[t,l]of e.clone().centerOrigin().getCells())this._cellsAlive.add(`${Math.floor(t+i)},${Math.floor(l+s)}`)}async iterate(){const e=new Map,i=this.rule;for(const t of this._cellsAlive){const[l,r]=t.split(",").map(Number);for(let h=-1;h<=1;h++)for(let d=-1;d<=1;d++)if(h!==0||d!==0){const c=[l+h,r+d].join(","),g=e.get(c)||0;e.set(c,g+1)}}const s=new Set;for(const[t,l]of e.entries())(this._cellsAlive.has(t)&&i.mustSurvive(l)||i.mustBorn(l))&&s.add(t);this._cellsAlive=s,this._iteration++}get iteration(){return this._iteration}toggleCell([e,i]){const s=`${e},${i}`;this._cellsAlive.has(s)?this._cellsAlive.delete(s):this._cellsAlive.add(s)}getCellsAlive(e){const{coordinate:[i,s]}=e;if(e.width*e.height>this._cellsAlive.size)return Array.from(this._cellsAlive).filter(t=>{const[l,r]=t.split(",").map(Number);return l>=i&&l<=i+e.width&&r>=s&&r<=s+e.height});{const t=[];for(let l=i;l<=i+e.width;l++)for(let r=s;r<=s+e.height;r++){const h=`${l},${r}`;this._cellsAlive.has(h)&&t.push(h)}return t}}get cellsAlive(){return this._cellsAlive}addSoup(e,i,s,t){for(let l=0;l<i;l++)for(let r=0;r<s;r++){const h=[e[0]+l,e[1]+r].join(",");Math.random()>t&&!this._cellsAlive.has(h)&&this._cellsAlive.add(h)}}}class v{constructor(){o(this,"isRunning");o(this,"isStarted");o(this,"life");o(this,"delay");o(this,"callbackActions");o(this,"lastIterationTime");this.isStarted=!1,this.isRunning=!1,this.life=new w,this.delay=100,this.callbackActions=[],this.lastIterationTime=NaN}setRunning(e){this.isRunning=e}addAction(e){this.isRunning?this.callbackActions.push(e):e()}async playActions(){for(const e of[...this.callbackActions])await e.bind(this)(),this.callbackActions.shift()}async sleep(e){return new Promise(i=>setTimeout(i,e))}async start(){if(!this.isStarted)for(this.isStarted=!0;;){for(;this.isRunning;){await this.playActions();const e=Date.now();await this.life.iterate(),this.lastIterationTime=Date.now()-e;const i=Math.max(this.delay-this.lastIterationTime,1);await this.sleep(i)}await this.sleep(100)}}async handleEvent({type:e,content:i}){switch(e){case"delay":this.delay=i.delay;break;case"start":this.setRunning(!0);break;case"stop":this.setRunning(!1);break;case"save":this.life.save();break;case"rule":const s=a.fromJSON(i.rule);this.addAction(()=>this.life.setRule(s));break;case"toggleCell":this.addAction(()=>this.life.toggleCell(i.coordinate));break;case"pattern":const t=n.fromJson(i.pattern);this.addAction(()=>this.life.addPattern(t,i.coordinate));break;case"reset":this.addAction(()=>this.life.reset());break;case"clear":this.addAction(()=>this.life.clear());break;case"iterate":this.isRunning||await this.life.iterate();break;case"cells":const l=i.range?this.life.getCellsAlive(i.range):Array.from(this.life.cellsAlive);return{type:e,content:{cells:l}};case"info":return{type:e,content:{cellsAlive:this.life.cellsAlive.size,lastIteration:this.lastIterationTime}};case"soup":this.addAction(()=>this.life.addSoup(i.origin,i.width,i.height,i.probability));break}return{type:e,content:{}}}}const b=new v;b.start(),onmessage=async m=>{const{id:e,...i}=m.data,t={...await b.handleEvent(i),id:m.data.id};postMessage(t)}})();
